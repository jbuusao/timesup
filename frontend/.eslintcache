[{"C:\\Data\\Projects\\_React\\timesup\\frontend\\src\\index.js":"1","C:\\Data\\Projects\\_React\\timesup\\frontend\\src\\App.js":"2","C:\\Data\\Projects\\_React\\timesup\\frontend\\src\\reportWebVitals.js":"3","C:\\Data\\Projects\\_React\\timesup\\frontend\\src\\components\\WordsCard.js":"4","C:\\Data\\Projects\\_React\\timesup\\frontend\\src\\components\\Users.js":"5","C:\\Data\\Projects\\_React\\timesup\\frontend\\src\\contexts\\AppContext.js":"6","C:\\Data\\Projects\\_React\\timesup\\frontend\\src\\components\\Login.js":"7","C:\\Data\\Projects\\_React\\timesup\\frontend\\src\\components\\GetWordCard.js":"8","C:\\Data\\Projects\\_React\\timesup\\frontend\\src\\components\\GuessCard.js":"9"},{"size":500,"mtime":499162500000,"results":"10","hashOfConfig":"11"},{"size":9156,"mtime":1609540964838,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"11"},{"size":3362,"mtime":1609539023980,"results":"14","hashOfConfig":"11"},{"size":3222,"mtime":1609539679731,"results":"15","hashOfConfig":"11"},{"size":242,"mtime":1609357731777,"results":"16","hashOfConfig":"11"},{"size":3107,"mtime":1609536407611,"results":"17","hashOfConfig":"11"},{"size":1949,"mtime":1609492792793,"results":"18","hashOfConfig":"11"},{"size":2174,"mtime":1609540537641,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1u9ogg9",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Data\\Projects\\_React\\timesup\\frontend\\src\\index.js",[],["40","41"],"C:\\Data\\Projects\\_React\\timesup\\frontend\\src\\App.js",[],"C:\\Data\\Projects\\_React\\timesup\\frontend\\src\\reportWebVitals.js",[],"C:\\Data\\Projects\\_React\\timesup\\frontend\\src\\components\\WordsCard.js",[],"C:\\Data\\Projects\\_React\\timesup\\frontend\\src\\components\\Users.js",[],"C:\\Data\\Projects\\_React\\timesup\\frontend\\src\\contexts\\AppContext.js",[],"C:\\Data\\Projects\\_React\\timesup\\frontend\\src\\components\\Login.js",["42","43"],"import React, { useState } from 'react'\r\nimport { Button, TextField, Typography } from '@material-ui/core'\r\nimport ConnectIcon from '@material-ui/icons/PersonAdd'\r\nimport RotateLeftIcon from '@material-ui/icons/RotateLeft'\r\nimport PlayArrowRoundedIcon from '@material-ui/icons/PlayArrowRounded'\r\nimport PlayCircleFilledWhiteIcon from '@material-ui/icons/PlayCircleFilledWhite'\r\nimport { AppContext } from '../contexts/AppContext'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Card from '@material-ui/core/Card'\r\nimport CardActions from '@material-ui/core/CardActions'\r\nimport CardContent from '@material-ui/core/CardContent'\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    flex: 1,\r\n    flexDirection: 'row',\r\n  },\r\n  textField: {\r\n    margin: '0 2px',\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  trash: {\r\n    cursor: 'pointer',\r\n  },\r\n  pos: {\r\n    // marginTop: 12,\r\n    marginBottom: 12,\r\n  },\r\n})\r\n\r\nexport default function Login() {\r\n  const classes = useStyles()\r\n  const [room, setRoom] = useState('')\r\n  const [name, setName] = useState('')\r\n\r\n  return (\r\n    <AppContext.Consumer>\r\n      {({ connectToServer, start, restart, admin, remainingWords, alert }) => {\r\n        return (\r\n          <div className={classes.root}>\r\n            <Card>\r\n              <CardContent>\r\n                <TextField\r\n                  className={classes.textField}\r\n                  color='primary'\r\n                  type='string'\r\n                  value={room}\r\n                  placeholder='Room'\r\n                  onChange={(e) => {\r\n                    setRoom(e.target.value)\r\n                  }}\r\n                />\r\n                <TextField\r\n                  className={classes.textField}\r\n                  color='primary'\r\n                  type='string'\r\n                  value={name}\r\n                  placeholder='Username'\r\n                  onChange={(e) => {\r\n                    setName(e.target.value)\r\n                  }}\r\n                />\r\n              </CardContent>\r\n              <CardActions>\r\n                <Button\r\n                  startIcon={<ConnectIcon />}\r\n                  color='primary'\r\n                  onClick={() => connectToServer(room, name)}\r\n                />\r\n                {admin ? (\r\n                  <Button\r\n                    startIcon={<PlayCircleFilledWhiteIcon />}\r\n                    color='secondary'\r\n                    onClick={() => start()}\r\n                  >\r\n                    New round\r\n                  </Button>\r\n                ) : null}\r\n                {admin ? (\r\n                  <Button\r\n                    startIcon={<RotateLeftIcon />}\r\n                    color='secondary'\r\n                    onClick={() => restart()}\r\n                  >\r\n                    New game\r\n                  </Button>\r\n                ) : null}\r\n                {/* {admin ? (\r\n                  <Typography>{remainingWords.toString()}</Typography>\r\n                ) : null} */}\r\n              </CardActions>\r\n            </Card>\r\n          </div>\r\n        )\r\n      }}\r\n    </AppContext.Consumer>\r\n  )\r\n}\r\n","C:\\Data\\Projects\\_React\\timesup\\frontend\\src\\components\\GetWordCard.js",[],"C:\\Data\\Projects\\_React\\timesup\\frontend\\src\\components\\GuessCard.js",[],{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":2,"column":29,"nodeType":"50","messageId":"51","endLine":2,"endColumn":39},{"ruleId":"48","severity":1,"message":"52","line":5,"column":8,"nodeType":"50","messageId":"51","endLine":5,"endColumn":28},"no-native-reassign",["53"],"no-negated-in-lhs",["54"],"no-unused-vars","'Typography' is defined but never used.","Identifier","unusedVar","'PlayArrowRoundedIcon' is defined but never used.","no-global-assign","no-unsafe-negation"]