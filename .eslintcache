[{"C:\\Data\\Projects\\_React\\timesup\\src\\index.js":"1","C:\\Data\\Projects\\_React\\timesup\\src\\App.js":"2","C:\\Data\\Projects\\_React\\timesup\\src\\reportWebVitals.js":"3","C:\\Data\\Projects\\_React\\timesup\\src\\components\\Login.js":"4","C:\\Data\\Projects\\_React\\timesup\\src\\contexts\\AppContext.js":"5","C:\\Data\\Projects\\_React\\timesup\\src\\components\\Header.js":"6","C:\\Data\\Projects\\_React\\timesup\\src\\components\\Users.js":"7","C:\\Data\\Projects\\_React\\timesup\\src\\components\\WordsCard.js":"8","C:\\Data\\Projects\\_React\\timesup\\src\\components\\GetWordCard.js":"9","C:\\Data\\Projects\\_React\\timesup\\src\\components\\StateDisplay.js":"10","C:\\Data\\Projects\\_React\\timesup\\src\\components\\GuessCard.js":"11"},{"size":500,"mtime":499162500000,"results":"12","hashOfConfig":"13"},{"size":8214,"mtime":1609438795378,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"15","hashOfConfig":"13"},{"size":3441,"mtime":1609384142112,"results":"16","hashOfConfig":"13"},{"size":242,"mtime":1609357731777,"results":"17","hashOfConfig":"13"},{"size":356,"mtime":1609380767870,"results":"18","hashOfConfig":"13"},{"size":2403,"mtime":1609427012976,"results":"19","hashOfConfig":"13"},{"size":3180,"mtime":1609426701619,"results":"20","hashOfConfig":"13"},{"size":1965,"mtime":1609430044179,"results":"21","hashOfConfig":"13"},{"size":340,"mtime":1609380732228,"results":"22","hashOfConfig":"13"},{"size":2102,"mtime":1609426139444,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1vas5w4",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"C:\\Data\\Projects\\_React\\timesup\\src\\index.js",[],["49","50"],"C:\\Data\\Projects\\_React\\timesup\\src\\App.js",["51"],"import React from 'react'\nimport { AppContext, AppState } from './contexts/AppContext'\nimport { withStyles } from '@material-ui/styles'\nimport Paper from '@material-ui/core/Paper'\nimport Grid from '@material-ui/core/Grid'\nimport { ThemeProvider } from '@material-ui/core/styles'\n\nimport './App.css'\nimport Login from './components/Login'\nimport Users from './components/Users'\nimport WordsCard from './components/WordsCard'\nimport GuessCard from './components/GuessCard'\nimport GetWordCard from './components/GetWordCard'\n\nconst serverAPI = 'wss://odkdv001gb.execute-api.us-east-1.amazonaws.com/dev'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      alert: null,\n      timerID: 0,\n      timer: 0,\n      allWords: [],\n      remainingWords: [],\n      usersPlayed: [],\n      wordsSubmitted: false,\n      wordToGuess: null,\n      wordsTried: [],\n      wordToGuessIndex: 0,\n      adminConnectionID: 0,\n      appState: AppState.AWAIT_PLAYERS,\n      room: '',\n      username: '',\n      admin: false,\n      users: [],\n      usersRound: [],\n      randomWords: [],\n      socket: null,\n    }\n  }\n\n  doPlayUser = (user) => {\n    this.sendToServer({\n      playUser: user.username,\n      from: this.state.username,\n      room: this.state.room,\n      allWords: this.state.remainingWords,\n    })\n  }\n\n  doStopPlay = () => {\n    console.log(`Cleared timer ${this.state.timerID}`)\n    if (this.state.timerID) {\n      clearInterval(this.state.timerID)\n      const remainingWords = this.state.allWords.slice(\n        this.state.wordToGuessIndex + 1\n      )\n      console.log(`Remaining words ${remainingWords}`)\n      this.setState({ timerID: 0 })\n      this.sendToServer({\n        stopPlayUser: this.state.username,\n        room: this.state.room,\n        remainingWords: remainingWords,\n        adminConnectionID: this.state.adminConnectionID,\n      })\n    }\n  }\n\n  doSkipWord = () => {\n    let i = this.state.wordToGuessIndex + 1\n    if (i >= this.state.allWords.length) i = 0\n    this.setState({ wordToGuess: this.state.allWords[i], wordToGuessIndex: i })\n  }\n\n  doRestart = () => {\n    this.setState({ remainingWords: this.state.randomWords })\n  }\n\n  doPlay = (phase) => {\n    console.log(`START PHASE ${phase} with words: ${this.state.allWords}`)\n    this.setState({\n      usersRound: this.state.users,\n      remainingWords: this.state.allWords,\n    })\n    this.sendToServer({\n      from: this.state.username,\n      getRandomWords: true,\n      room: this.state.room,\n    })\n\n    // this.sendToServer({\n    //   from: this.state.username,\n    //   play: phase,\n    //   usersRound: this.state.usersRound,\n    // })\n  }\n\n  shuffle = (array) => {\n    var currentIndex = array.length,\n      temporaryValue,\n      randomIndex\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex)\n      currentIndex -= 1\n\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex]\n      array[currentIndex] = array[randomIndex]\n      array[randomIndex] = temporaryValue\n    }\n    return array\n  }\n\n  // We must play\n  handlePlay = (words, adminConnectionID) => {\n    const shuffled = this.shuffle(words)\n    this.setState({ alert: shuffled, timer: 30 })\n    if (this.state.timerID === 0) {\n      const timerId = setInterval(() => {\n        this.setState({ timer: this.state.timer - 1 })\n      }, 1000)\n      const guess = shuffled[0]\n      console.log(`Set timer ${timerId} for ${shuffled}`)\n      this.setState({\n        timerID: timerId,\n        adminConnectionID: adminConnectionID,\n        allWords: shuffled,\n        wordToGuessIndex: 0,\n        wordToGuess: guess,\n      })\n    }\n  }\n\n  handleStopPlayUser = (username, remainingWords) => {\n    this.setState({\n      remainingWords: remainingWords,\n      usersPlayed: this.state.usersPlayed.push(username),\n    })\n  }\n\n  // Users have changed\n  handleUserChanged = (users) => {\n    // Determine if all users have entered their lists of words\n    if (\n      this.state.appState === AppState.AWAIT_PLAYERS ||\n      this.state.appState === AppState.AWAIT_WORDS\n    ) {\n      const awaiting = users.filter((user) => user.numberWords === 0)\n      this.setState({\n        appState: awaiting.length ? AppState.AWAIT_WORDS : AppState.ROUND1,\n      })\n    }\n    this.setState({ users: users })\n  }\n\n  getRandomWords = () => {\n    this.sendToServer({\n      from: this.state.username,\n      getRandomWords: true,\n      room: this.state.room,\n    })\n  }\n\n  submitWords = (words) => {\n    this.sendToServer({\n      from: this.state.username,\n      room: this.state.room,\n      words: words,\n    })\n    this.setState({ wordsSubmitted: true })\n  }\n\n  openConnection = () => {\n    if (this.state.socket) this.state.socket.close()\n    const ws = new WebSocket(serverAPI)\n    this.setState({ socket: ws })\n\n    ws.onmessage = (e) => {\n      try {\n        try {\n          const data = JSON.parse(e.data)\n          if (data.type && data.type === 'usersChanged')\n            this.handleUserChanged(data.users)\n          else if (data.type && data.type === 'randomWords')\n            this.setState({ randomWords: data.data, remainingWords: data.data })\n          else if (data.type === 'play') {\n            this.handlePlay(data.words, data.adminConnectionID)\n          } else if (data.type === 'stopPlayUser') {\n            this.handleStopPlayUser(data.username, data.remainingWords)\n          }\n        } catch (err) {\n          console.log('Parsing error: ' + err)\n        }\n      } catch (error) {\n        console.log('Received from AWS' + e.data)\n        console.log('Error: ' + error.toString())\n      }\n    }\n  }\n\n  componentDidMount() {\n    this.openConnection()\n  }\n\n  // Connect to the server as \"username\"\n  doConnectToServer = (room, name) => {\n    // this.openConnection()\n    this.sendToServer({ connect: name, room: room })\n    this.setState({ room: room, username: name, admin: name === 'Admin' })\n    // Alert.alert(`Connected as ${name}...`)\n  }\n\n  sendToServer = (data) => {\n    if (this.state.socket)\n      this.state.socket.send(\n        JSON.stringify({ action: 'message', message: data })\n      )\n  }\n\n  render() {\n    const { classes } = this.props\n    return (\n      <AppContext.Provider\n        value={{\n          timer: this.state.timer,\n          wordsSubmitted: this.state.wordsSubmitted,\n          stopPlay: this.doStopPlay,\n          timerID: this.state.timerID,\n          alert: this.state.alert,\n          admin: this.state.admin,\n          appState: this.state.appState,\n          username: this.state.username,\n          users: this.state.users,\n          submitWords: this.submitWords,\n          connectToServer: this.doConnectToServer,\n          getRandomWords: this.getRandomWords,\n          randomWords: this.state.randomWords,\n          play: this.doPlay,\n          restart: this.doRestart,\n          playUser: this.doPlayUser,\n          wordToGuess: this.state.wordToGuess,\n          skipWord: this.doSkipWord,\n        }}\n      >\n        <ThemeProvider>\n          <div className={classes.root}>\n            <Paper className={classes.paper}>\n              <Grid container>\n                <Grid item>\n                  <Login />\n                </Grid>\n                <Grid item>\n                  <GuessCard />\n                </Grid>\n                <Grid item>\n                  <Users />\n                </Grid>\n                {!this.state.admin &&\n                this.state.username &&\n                !this.state.wordsSubmitted ? (\n                  <Grid item>\n                    <WordsCard />\n                  </Grid>\n                ) : null}\n                {/* <Grid item>\n                  <GetWordCard />\n                </Grid> */}\n              </Grid>\n            </Paper>\n          </div>\n        </ThemeProvider>\n      </AppContext.Provider>\n    )\n  }\n}\n\nconst styles = (theme) => ({\n  root: {\n    // background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n    flexGrow: 1,\n  },\n  paper: {\n    // padding: theme.spacing(2),\n    margin: 'auto',\n    padding: '10px 30px',\n    maxWidth: 500,\n  },\n})\n\nexport default withStyles(styles)(App)\n","C:\\Data\\Projects\\_React\\timesup\\src\\reportWebVitals.js",[],"C:\\Data\\Projects\\_React\\timesup\\src\\components\\Login.js",[],"C:\\Data\\Projects\\_React\\timesup\\src\\contexts\\AppContext.js",[],"C:\\Data\\Projects\\_React\\timesup\\src\\components\\Header.js",[],"C:\\Data\\Projects\\_React\\timesup\\src\\components\\Users.js",[],"C:\\Data\\Projects\\_React\\timesup\\src\\components\\WordsCard.js",[],"C:\\Data\\Projects\\_React\\timesup\\src\\components\\GetWordCard.js",[],["52","53"],"C:\\Data\\Projects\\_React\\timesup\\src\\components\\StateDisplay.js",[],"C:\\Data\\Projects\\_React\\timesup\\src\\components\\GuessCard.js",[],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":13,"column":8,"nodeType":"60","messageId":"61","endLine":13,"endColumn":19},{"ruleId":"54","replacedBy":"62"},{"ruleId":"56","replacedBy":"63"},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"no-unused-vars","'GetWordCard' is defined but never used.","Identifier","unusedVar",["64"],["65"],"no-global-assign","no-unsafe-negation"]